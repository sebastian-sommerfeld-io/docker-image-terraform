---
name: CICD

on:
  push:
    branches-ignore:
      - dependabot/**
    tags:
      - v*
  pull_request:
    # branches: [ "main", "feat/*", "release/*" ]
    branches-ignore:
      - dependabot/**
  schedule:
    - cron: '0 2 * * 1' # https://crontab.guru

permissions:
  contents: read

jobs:
  lint-yaml:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run yamllint
        uses: ibiqlik/action-yamllint@v3

  lint-env-files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run dotenvlinter in container
        run: docker run -i --rm --volume "$(pwd):/app" --workdir "/app" dotenvlinter/dotenv-linter:latest --exclude "*node_modules*" --recursive
        shell: bash

  lint-folders:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run folderslint in container
        run: docker run -i --rm --volume "$(pwd):$(pwd)" --workdir "$(pwd)" sommerfeldio/folderslint:latest folderslint
        shell: bash

  lint-filenames:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run ls-lint in container
        run: docker run -i --rm --volume "$(pwd):/data" --workdir "/data" lslintorg/ls-lint:1.11.0
        shell: bash

  shellcheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@2.0.0
        with:
          ignore_paths: node_modules target

  lint-dockerfile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: src/main/Dockerfile

  ci:
    runs-on: ubuntu-latest
    needs: ['lint-yaml', 'lint-env-files', 'lint-folders', 'lint-filenames', 'shellcheck', 'lint-dockerfile']
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set docker tag ('ci' for main or feature branch, 'release-candidate' for release branch)
        id: vars
        run: |
          echo ${{ github.ref }}

          TAG='ci'
          REF='refs/heads/release/'

          if [[ ${{ github.ref }} == *${REF}* ]]; then
            TAG='release-candidate'
          fi

          echo "tag = $TAG"
          echo "DOCKER_TAG=$TAG" >> $GITHUB_OUTPUT
        shell: bash
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        if: ${{ github.actor != 'dependabot[bot]' }}
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Docker image build
        uses: docker/build-push-action@v4
        with:
          context: ./src/main
          platforms: linux/amd64
          push: ${{ github.actor != 'dependabot[bot]' }}
          tags: sommerfeldio/terraform:${{ steps.vars.outputs.DOCKER_TAG }}
      - name: Run container and print versions of installed packages
        run: |
          # docker pull sommerfeldio/terraform:${{ steps.vars.outputs.DOCKER_TAG }}
          docker run -i sommerfeldio/terraform:${{ steps.vars.outputs.DOCKER_TAG }} -version
        shell: bash

  cd-docker-image:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags')
    needs: ci
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Get current tag name
        id: vars
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT
        shell: bash
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Re-Tag image sommerfeldio/terraform from :release-candidate to :${{ steps.vars.outputs.tag }} and :latest
        run: |
          VERSION_TAG="$(cut -d "v" -f2 <<< ${{ steps.vars.outputs.tag }})"
          docker pull sommerfeldio/terraform:release-candidate

          docker tag sommerfeldio/terraform:release-candidate sommerfeldio/terraform:latest
          docker tag sommerfeldio/terraform:release-candidate sommerfeldio/terraform:$VERSION_TAG

          docker push sommerfeldio/terraform:latest
          docker push sommerfeldio/terraform:$VERSION_TAG
        shell: bash
      - name: Convert README from Asciidoc to Markdown for DockerHub description
        run: |
          sudo apt-get install -y pandoc asciidoc
          asciidoc -b docbook README.adoc
          pandoc -f docbook -t markdown_strict README.xml -o README.md
        shell: bash
      - name: Update DockerHub description
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: sommerfeldio/terraform
          short-description: ${{ github.event.repository.description }}
          readme-filepath: ./README.md

  on-failure:
    runs-on: ubuntu-latest
    needs: ['ci', 'cd-docker-image', 'lint-yaml', 'lint-env-files', 'lint-folders', 'lint-filenames', 'shellcheck', 'lint-dockerfile']
    if: failure()
    steps:
      - name: Send Pipeline Status to Google Chat
        if: always()
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: ${{ github.workflow }}
          url: ${{ secrets.GOOGLE_CHAT_WEBHOOK }}
          status: failure
